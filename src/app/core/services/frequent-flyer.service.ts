import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Observable, of } from 'rxjs';
import { FrequentFlyer, Benefit, ActivityRecord, TierLevel, ActivityType, RedemptionReward, RewardCategory } from '../models/frequent-flyer.model';
import { environment } from '../../../environments/environment';

@Injectable({
  providedIn: 'root'
})
export class FrequentFlyerService {
  private readonly API_URL = `${environment.apiBaseUrl}/frequent-flyer`;
  
  // Mock data for benefits at different tier levels
  private mockBenefits: Benefit[] = [
    {
      id: 'benefit1',
      name: 'H√†nh l√Ω ∆∞u ti√™n',
      description: 'H√†nh l√Ω c·ªßa b·∫°n s·∫Ω ƒë∆∞·ª£c ∆∞u ti√™n x·ª≠ l√Ω ƒë·∫ßu ti√™n khi h·∫° c√°nh',
      icon: 'üß≥',
      availableTiers: [TierLevel.SILVER, TierLevel.GOLD, TierLevel.PLATINUM]
    },
    {
      id: 'benefit2',
      name: 'L√™n m√°y bay ∆∞u ti√™n',
      description: 'L√™n m√°y bay tr∆∞·ªõc v·ªõi l√†n ∆∞u ti√™n ri√™ng',
      icon: '‚úàÔ∏è',
      availableTiers: [TierLevel.SILVER, TierLevel.GOLD, TierLevel.PLATINUM]
    },
    {
      id: 'benefit3',
      name: 'Ch·ªçn ch·ªó ng·ªìi mi·ªÖn ph√≠',
      description: 'Ch·ªçn ch·ªó ng·ªìi ∆∞u ti√™n m√† kh√¥ng m·∫•t ph√≠ b·ªï sung',
      icon: 'üí∫',
      availableTiers: [TierLevel.SILVER, TierLevel.GOLD, TierLevel.PLATINUM]
    },
    {
      id: 'benefit4',
      name: 'N√¢ng h·∫°ng mi·ªÖn ph√≠',
      description: 'Nh·∫≠n 1 l·∫ßn n√¢ng h·∫°ng mi·ªÖn ph√≠ m·ªói nƒÉm',
      icon: '‚¨ÜÔ∏è',
      availableTiers: [TierLevel.GOLD, TierLevel.PLATINUM]
    },
    {
      id: 'benefit5',
      name: 'Ph√≤ng ch·ªù VIP',
      description: 'Truy c·∫≠p v√†o ph√≤ng ch·ªù VIP t·∫°i c√°c s√¢n bay',
      icon: 'üõãÔ∏è',
      availableTiers: [TierLevel.GOLD, TierLevel.PLATINUM]
    },
    {
      id: 'benefit6',
      name: 'Concierge d·ªãch v·ª•',
      description: 'D·ªãch v·ª• concierge c√° nh√¢n h√≥a t·∫°i s√¢n bay',
      icon: 'üë®‚Äçüíº',
      availableTiers: [TierLevel.PLATINUM]
    },
    {
      id: 'benefit7',
      name: 'H√†nh l√Ω mi·ªÖn ph√≠',
      description: 'TƒÉng gi·ªõi h·∫°n h√†nh l√Ω l√™n 10kg',
      icon: 'üß≥',
      availableTiers: [TierLevel.GOLD, TierLevel.PLATINUM]
    },
    {
      id: 'benefit8',
      name: 'T√≠ch ƒëi·ªÉm g·∫•p ƒë√¥i',
      description: 'Nh·∫≠n ƒëi·ªÉm th∆∞·ªüng g·∫•p ƒë√¥i cho m·ªói chuy·∫øn bay',
      icon: '2Ô∏è‚É£',
      availableTiers: [TierLevel.PLATINUM]
    }
  ];

  // Mock activity history data
  private mockActivityHistory: { [userId: string]: ActivityRecord[] } = {
    'user1': [
      {
        id: 'act1',
        date: new Date('2023-06-10'),
        activityType: ActivityType.FLIGHT,
        description: 'Chuy·∫øn bay SGN-HAN',
        pointsEarned: 500,
        flightId: 'VN123'
      },
      {
        id: 'act2',
        date: new Date('2023-07-15'),
        activityType: ActivityType.FLIGHT,
        description: 'Chuy·∫øn bay HAN-DAD',
        pointsEarned: 300,
        flightId: 'VN456'
      },
      {
        id: 'act3',
        date: new Date('2023-08-22'),
        activityType: ActivityType.REDEMPTION,
        description: 'ƒê·ªïi ƒëi·ªÉm l·∫•y v√© mi·ªÖn ph√≠',
        pointsEarned: -2000
      },
      {
        id: 'act4',
        date: new Date('2023-09-05'),
        activityType: ActivityType.PROMOTION,
        description: 'Khuy·∫øn m√£i nh√¢n ng√†y th√†nh l·∫≠p',
        pointsEarned: 1000
      },
      {
        id: 'act5',
        date: new Date('2023-10-18'),
        activityType: ActivityType.FLIGHT,
        description: 'Chuy·∫øn bay SGN-HPH',
        pointsEarned: 450,
        flightId: 'VN789'
      },
      {
        id: 'act6',
        date: new Date('2023-11-30'),
        activityType: ActivityType.TIER_UPGRADE,
        description: 'N√¢ng h·∫°ng l√™n SILVER',
        pointsEarned: 0
      },
      {
        id: 'act7',
        date: new Date('2023-12-25'),
        activityType: ActivityType.FLIGHT,
        description: 'Chuy·∫øn bay HPH-SGN',
        pointsEarned: 450,
        flightId: 'VN790'
      }
    ]
  };

  constructor(private http: HttpClient) { }

  /**
   * L·∫•y th√¥ng tin kh√°ch h√†ng th√¢n thi·∫øt c·ªßa ng∆∞·ªùi d√πng
   */
  getUserFrequentFlyer(userId: string): Observable<FrequentFlyer | null> {
    // In a real app, this would make an API call
    // return this.http.get<FrequentFlyer>(`${this.API_URL}/users/${userId}`);
    
    // Mock implementation
    const mockUser: FrequentFlyer = {
      id: 'ff123',
      userId: userId,
      membershipNumber: 'VN' + Math.floor(1000000 + Math.random() * 9000000).toString(),
      tierLevel: TierLevel.SILVER,
      points: 12500,
      tierExpiryDate: new Date(new Date().setFullYear(new Date().getFullYear() + 1)),
      enrollmentDate: new Date('2023-01-15'),
      benefits: this.getBenefitsByTierInternal(TierLevel.SILVER),
      activityHistory: this.mockActivityHistory[userId] || []
    };
    
    return of(mockUser);
  }

  /**
   * L·∫•y danh s√°ch c√°c quy·ªÅn l·ª£i d·ª±a tr√™n c·∫•p th√†nh vi√™n
   */
  getBenefitsByTier(tierLevel: TierLevel): Observable<Benefit[]> {
    // In a real app, this would make an API call
    // return this.http.get<Benefit[]>(`${this.API_URL}/benefits?tier=${tierLevel}`);
    
    // Mock implementation
    return of(this.getBenefitsByTierInternal(tierLevel));
  }

  /**
   * L·∫•y l·ªãch s·ª≠ ho·∫°t ƒë·ªông c·ªßa th√†nh vi√™n v·ªõi ph√¢n trang
   */
  getActivityHistory(userId: string, page: number = 1, pageSize: number = 10): Observable<ActivityRecord[]> {
    // In a real app, this would make an API call
    // return this.http.get<ActivityRecord[]>(
    //   `${this.API_URL}/users/${userId}/activities?page=${page}&pageSize=${pageSize}`
    // );
    
    // Mock implementation
    const activities = this.mockActivityHistory[userId] || [];
    const start = (page - 1) * pageSize;
    const end = start + pageSize;
    const paginatedActivities = activities.slice(start, end);
    
    return of(paginatedActivities);
  }

  /**
   * ƒêƒÉng k√Ω ng∆∞·ªùi d√πng v√†o ch∆∞∆°ng tr√¨nh kh√°ch h√†ng th√¢n thi·∫øt
   */
  enrollUser(userId: string, firstName: string, lastName: string, email: string): Observable<FrequentFlyer> {
    // In a real app, this would make an API call
    // return this.http.post<FrequentFlyer>(`${this.API_URL}/enroll`, {
    //   userId, firstName, lastName, email
    // });
    
    // Mock implementation
    const mockEnrollment: FrequentFlyer = {
      id: 'ff' + Math.floor(100000 + Math.random() * 900000).toString(),
      userId: userId,
      membershipNumber: 'VN' + Math.floor(1000000 + Math.random() * 9000000).toString(),
      tierLevel: TierLevel.BRONZE,
      points: 0,
      tierExpiryDate: new Date(new Date().setFullYear(new Date().getFullYear() + 1)),
      enrollmentDate: new Date(),
      benefits: this.getBenefitsByTierInternal(TierLevel.BRONZE),
      activityHistory: []
    };
    
    // Add user to mock data
    this.mockActivityHistory[userId] = [];
    
    return of(mockEnrollment);
  }

  /**
   * Th√™m m·ªôt ho·∫°t ƒë·ªông m·ªõi v√†o l·ªãch s·ª≠ c·ªßa th√†nh vi√™n
   */
  addActivity(
    userId: string,
    activityType: ActivityType,
    description: string,
    pointsEarned: number,
    flightId?: string
  ): Observable<ActivityRecord> {
    // In a real app, this would make an API call
    // return this.http.post<ActivityRecord>(`${this.API_URL}/users/${userId}/activities`, {
    //   activityType, description, pointsEarned, flightId
    // });
    
    // Mock implementation
    const newActivity: ActivityRecord = {
      id: 'act' + Math.floor(100000 + Math.random() * 900000).toString(),
      date: new Date(),
      activityType,
      description,
      pointsEarned,
      flightId
    };
    
    // Add to mock history
    if (!this.mockActivityHistory[userId]) {
      this.mockActivityHistory[userId] = [];
    }
    
    this.mockActivityHistory[userId].unshift(newActivity);
    
    return of(newActivity);
  }

  /**
   * T√≠nh to√°n ƒëi·ªÉm th∆∞·ªüng cho chuy·∫øn bay d·ª±a tr√™n gi√° v√© v√† h·∫°ng gh·∫ø
   */
  calculateFlightPoints(fareAmount: number, fareClass: string): number {
    let multiplier = 1;
    
    // Different multipliers based on fare class
    switch (fareClass.toUpperCase()) {
      case 'ECONOMY':
        multiplier = 1;
        break;
      case 'PREMIUM_ECONOMY':
        multiplier = 1.5;
        break;
      case 'BUSINESS':
        multiplier = 2;
        break;
      case 'FIRST':
        multiplier = 3;
        break;
    }
    
    // Base calculation: 10 points per $1 spent, adjusted by class multiplier
    return Math.floor(fareAmount * 10 * multiplier);
  }

  /**
   * ƒê·ªïi ƒëi·ªÉm l·∫•y ph·∫ßn th∆∞·ªüng
   */
  redeemPoints(userId: string, rewardId: string, pointsToRedeem: number): Observable<boolean> {
    // In a real app, this would make an API call
    // return this.http.post<{success: boolean}>(`${this.API_URL}/users/${userId}/redeem`, {
    //   rewardId, pointsToRedeem
    // }).pipe(map(response => response.success));
    
    // Mock implementation - just simulate success
    // In a real app, you'd check if user has enough points, deduct them, etc.
    
    // Add a redemption activity to the history
    this.addActivity(
      userId,
      ActivityType.REDEMPTION,
      'ƒê·ªïi ƒëi·ªÉm th∆∞·ªüng: ' + rewardId,
      -pointsToRedeem
    );
    
    return of(true);
  }

  /**
   * Helper method to get benefits for a tier level
   */
  private getBenefitsByTierInternal(tierLevel: TierLevel): Benefit[] {
    return this.mockBenefits.filter(benefit => benefit.availableTiers.includes(tierLevel));
  }
} 